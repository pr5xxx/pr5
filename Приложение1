#include <iostream>
#include <cmath>
#include <algorithm>
#define M_PI 3.14159265358979323846

using namespace std;


class Oval {

private:
    double width;
    double height;
    double maxWidth;
    double maxHeight;

public:
    Oval(double width, double height, double maxHeight, double maxWidth) :
        width(width), height(height), maxHeight(maxHeight), maxWidth(maxWidth) {}

    double getPerimeter() {
        return 2 * 3.14 * sqrt((width * width + height * height) / 8);
    }

    double getPloshad() {
        return 3.14 * width * height / 4;
    }

    bool isValid() {
        return (width > 0 && width <= maxWidth) && (height > 0 && height <= maxHeight);
    }


};
class parallelogram {
private:
    double base;
    double side;
    double angle;
    double max_base;
    double max_side;
    double max_angle;

public:
    parallelogram(double b, double s, double angl, double max_b, double max_s, double max_angl) {
        base = b;
        side = s;
        angle = angl;
        max_base = max_b;
        max_side = max_s;
        max_angle = max_angl;
    }

    double getperimeter() {
        return 2 * (base + side);
    }

    double getploshad() {
        double angleInRadians = angle * M_PI / 180.0; // Перевод угла из градусов в радианы

        return base * side * sin(angleInRadians);
    }

    double getangle() {
        double angle2 = angle;
        return 180 - angle2;
    }

    double getdiagonal1() {
        double angleInRadians = angle * M_PI / 180.0; // Перевод угла из градусов в радианы
        return sqrt(pow(base, 2) + pow(side, 2) + 2 * base * side * cos(angleInRadians));

    }
    double getdiagonal2() {
        double angleInRadians = angle * M_PI / 180.0; // Перевод угла из градусов в радианы
        return sqrt(pow(base, 2) + pow(side, 2) - 2 * base * side * cos(angleInRadians));
    }


    bool isValid() {

        return ((base > 0 && base <= max_base) && (side > 0 && side <= max_side) && (angle > 0 && angle <= max_angle));
    }
};

class pramougolnik {

private:

    double width;
    double height;
    double maxWidth;
    double maxHeight;

public:
    pramougolnik(double w, double h, double maxW, double maxH) {
        width = w;
        height = h;
        maxWidth = maxW;
        maxHeight = maxH;
    }

    double getPerimeter() {
        return 2 * (width + height);
    }

    double getploshad() {
        return width * height;
    }

    double getdiagonal() {
        return sqrt(pow(width, 2) + pow(height, 2));
    }

    bool isValid() {
        return (width > 0 && width <= maxWidth) && (height > 0 && height <= maxHeight);
    }
};
class circle {
private:
    double radius;
    double maxRadius;
public:
    circle(double r, double maxR) {
        radius = r;
        maxRadius = maxR;
    }
    double getPerimeter() {
        return 2 * M_PI * radius;
    }
    double getploshad() {
        return M_PI * radius * radius;
    }
    double getdiametr() {
        return 2 * radius;
    }
    bool isValid() {
        return (radius > 0 && radius <= maxRadius);
    }
};
class Triangle {
private:
    double sideA, sideB, sideC;
public:
    Triangle(double a, double b, double c);
    double getSideA() const;
    double getSideB() const;
    double getSideC() const;
    double getPerimeter() const;
    double getArea() const;
    double getAngleA() const;
    double getAngleB() const;
    double getAngleC() const;
    bool isRight() const; // Right - Прямоугольный
    bool isAcute() const; // Acute - Остроугольный
    bool isObtuse() const; // Obtuse - Тупоугольный
    bool isIsosceles() const; // Isosceles - Равнобедренный
    bool isEquilateral() const; // Equilateral - Равносторонний
};

Triangle::Triangle(double a, double b, double c) {
    sideA = a;
    sideB = b;
    sideC = c;
}

double Triangle::getSideA() const {
    return sideA;
}

double Triangle::getSideB() const {
    return sideB;
}

double Triangle::getSideC() const {
    return sideC;
}

double Triangle::getPerimeter() const {
    return sideA + sideB + sideC;
}

double Triangle::getArea() const {
    double p = (sideA + sideB + sideC) / 2;
    return sqrt(p * (p - sideA) * (p - sideB) * (p - sideC));
}

double Triangle::getAngleA() const {
    return acos((sideB * sideB + sideC * sideC - sideA * sideA) / (2 * sideB * sideC));
}

double Triangle::getAngleB() const {
    return acos((sideA * sideA + sideC * sideC - sideB * sideB) / (2 * sideA * sideC));
}

double Triangle::getAngleC() const {
    return acos((sideA * sideA + sideB * sideB - sideC * sideC) / (2 * sideA * sideB));
}

bool Triangle::isRight() const {
    double sides[3] = { sideA, sideB, sideC };
    std::sort(sides, sides + 3);
    return std::abs(sides[2] * sides[2] - (sides[0] * sides[0] + sides[1] * sides[1])) < 1e-10;
}

bool Triangle::isAcute() const {
    double sides[3] = { sideA, sideB, sideC };
    std::sort(sides, sides + 3);
    return sides[2] * sides[2] < sides[0] * sides[0] + sides[1] * sides[1];
}

bool Triangle::isObtuse() const {
    double sides[3] = { sideA, sideB, sideC };
    std::sort(sides, sides + 3);
    return sides[2] * sides[2] > sides[0] * sides[0] + sides[1] * sides[1];
}

bool Triangle::isIsosceles() const {
    return sideA == sideB || sideB == sideC || sideC == sideA;
}

bool Triangle::isEquilateral() const {
    return sideA == sideB && sideB == sideC;
}
class Trapeze {
private:
    double Top_base;
    double Bottom_base;
    double Side1;
    double Side2;
    double Height;
    double maxTop_base;
    double maxBottom_base;
    double maxSide1;
    double maxSide2;
    double maxHeight;
    double Corner1;
    double Corner2;
    double Corner3;
    double Corner4;
    double maxCorner1;
    double maxCorner2;
    double maxCorner3;
    double maxCorner4;

public:
    Trapeze(double Tb, double Bb, double S1, double S2, double H, double maxTb, double maxBb, double maxS1, double maxS2, double maxH,
        double C1, double C2, double C3, double C4, double maxC1, double maxC2, double maxC3, double maxC4)
    {
        Top_base = Tb;
        Bottom_base = Bb;
        Side1 = S1;
        Side2 = S2;
        Height = H;
        maxTop_base = maxTb;
        maxBottom_base = maxBb;
        maxSide1 = maxS1;
        maxSide2 = maxS2;
        maxHeight = maxH;

        Corner1 = C1;
        Corner2 = C2;
        Corner3 = C3;
        Corner4 = C4;
        maxCorner1 = maxC1;
        maxCorner2 = maxC2;
        maxCorner3 = maxC3;
        maxCorner4 = maxC4;
    }

    double getPerimeter()
    {
        return (Top_base + Bottom_base + Side1 + Side2);
    }

    double getPloshad()
    {
        return (Top_base + Bottom_base) * Height / 2;
    }

    double getCorner1()
    {
        double Corner2 = Corner1;
        return 180 - Corner2;
    }

    double getCorner2()
    {
        double Corner4 = Corner3;
        return 180 - Corner4;
    }

    double getSide()
    {
        return Side1;
        return Side2;
        return Top_base;
        return Bottom_base;
    }

    bool isValid()
    {
        return (Top_base > 0 && Top_base <= maxTop_base) && (Bottom_base > 0 && Bottom_base <= maxBottom_base) &&
            (Side1 > 0 && Side1 <= maxSide1) && (Side2 > 0 && Side2 <= maxSide2);
    }

    bool Valid()
    {
        return (Corner1 > 0 && Corner1 <= maxCorner1) && (Corner2 > 0 && Corner2 <= maxCorner2)
            && (Corner3 > 0 && Corner3 <= maxCorner3) && (Corner4 > 0 && Corner4 <= maxCorner4);
    }

};
