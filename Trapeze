#include <iostream>
#include <cmath>

using namespace std;

class Trapeze {
private:
    double Top_base; 
    double Bottom_base; 
    double Side1;  
    double Side2; 
    double Height;
    double maxTop_base;
    double maxBottom_base;
    double maxSide1; 
    double maxSide2;
    double maxHeight;
    double Corner1;
    double Corner2;
    double Corner3;
    double Corner4;
    double maxCorner1;
    double maxCorner2;
    double maxCorner3;
    double maxCorner4;

public:
    Trapeze(double Tb, double Bb, double S1, double S2, double H, double maxTb, double maxBb, double maxS1, double maxS2, double maxH,
        double C1, double C2, double C3, double C4, double maxC1, double maxC2, double maxC3, double maxC4)
    {
        Top_base = Tb;
        Bottom_base = Bb;
        Side1 = S1;
        Side2 = S2;
        Height = H;
        maxTop_base = maxTb;
        maxBottom_base = maxBb;
        maxSide1 = maxS1;
        maxSide2 = maxS2;
        maxHeight = maxH;

        Corner1 = C1;
        Corner2 = C2;
        Corner3 = C3;
        Corner4 = C4;
        maxCorner1 = maxC1;
        maxCorner2 = maxC2;
        maxCorner3 = maxC3;
        maxCorner4 = maxC4;
    }

    double getPerimeter() 
    {
        return (Top_base + Bottom_base + Side1 + Side2);
    }

    double getPloshad() 
    {
        return (Top_base + Bottom_base) * Height / 2;
    }
    
    double getCorner1()
    {
        double Corner2 = Corner1;
        return 180 - Corner2;
    }

    double getCorner2()
    {
        double Corner4 = Corner3;
        return 180 - Corner4;
    }

    double getSide()
    {
        return Side1;
        return Side2;
        return Top_base;
        return Bottom_base;
    }

    bool isValid() 
    {
        return (Top_base > 0 && Top_base <= maxTop_base) && (Bottom_base > 0 && Bottom_base <= maxBottom_base) &&
            (Side1 > 0 && Side1 <= maxSide1) && (Side2 > 0 && Side2 <= maxSide2);
    }

    bool Valid()
    {
        return (Corner1 > 0 && Corner1 <= maxCorner1) && (Corner2 > 0 && Corner2 <= maxCorner2)
            && (Corner3 > 0 && Corner3 <= maxCorner3) && (Corner4 > 0 && Corner4 <= maxCorner4);
    }

};

int main() {
    double Top_base, Bottom_base, Side1, Side2, Height;
    double Corner1, Corner2, Corner3, Corner4;
    int choice;
    const double MAX_Top_base = 1000.0;
    const double MAX_Bottom_base = 1000.0;
    const double MAX_Side1 = 1000.0;
    const double MAX_Side2 = 1000.0;
    const double MAX_Height = 1000.0;
    const double MAX_Corner1 = 360.0;
    const double MAX_Corner2 = 360.0;
    const double MAX_Corner3 = 360.0;
    const double MAX_Corner4 = 360.0;

    setlocale(LC_ALL, "Russian");

    cout << "Введите верхнее основание трапеции: ";
    cin >> Top_base;

    cout << "Введите нижнее основание трапеции: ";
    cin >> Bottom_base;

    cout << "Введите боковую сторону 1 трапеции: ";
    cin >> Side1;

    cout << "Введите боковую сторону 2 трапеции: ";
    cin >> Side2;

    cout << "Введите угол 1 трапеции: ";
    cin >> Corner1;

    cout << "Введите угол 2 трапеции: ";
    cin >> Corner2;

    cout << "Введите угол 3 трапеции: ";
    cin >> Corner3;

    cout << "Введите угол 4 трапеции: ";
    cin >> Corner4;

    Height = - Side1 * sin(Corner1);
    cout << "Высота трапеции: " << Height << endl << endl;;

     if (Corner1 + Corner2 > 180)
     {
         cout << "Такого не может быть" << endl << endl;
         exit(0);
     }

     if (Corner3 + Corner4 > 180)
     {
         cout << "Такого не может быть" << endl << endl;
         exit(0);
     }

     if (Corner1 + Corner2 < 180)
     {
         cout << "Такого не может быть" << endl << endl;
         exit(0);
     }

     if (Corner3 + Corner4 < 180)
     {
         cout << "Такого не может быть" << endl << endl;
         exit(0);
     }

     if (Corner1 == 90 || Corner2 == 90 || Corner3 == 90 || Corner4 == 90)
     {
         cout << "Прямоугольная трапеция" << endl << endl;
     }

     if ((Side1 == Side2) && (Corner1 == Corner4))
     {
         cout << "Равнобедренная трапеция" << endl << endl;
     }
     else
     {
         cout << "Такого не может быть" << endl << endl;
         exit(0);
     }

    Trapeze Trapeze(Top_base, Bottom_base, Side1, Side2, Height, MAX_Top_base, MAX_Bottom_base, MAX_Side1, MAX_Side2, MAX_Height,
        Corner1, Corner2, Corner3, Corner4, MAX_Corner1, MAX_Corner2, MAX_Corner3, MAX_Corner4);

    if (!Trapeze.isValid()) 
    {
        cout << "Размеры верхней/нижней и/или боковые стороны некорректны." << endl;
        return 0;
    }

    if (!Trapeze.Valid())
    {
        cout << "Размеры углов некорректны." << endl;
        return 0;
    }
    cout << "Выберите, что нужно посчитать:\n";
    cout << "1. Периметр\n";
    cout << "2. Площадь\n";
    cout << "3. Углы\n";
    cout << "4. Стороны\n";
    cout << "Ваш выбор: ";
    cin >> choice;

    switch (choice) {
    case 1: {
        double perimeter = Trapeze.getPerimeter();
        cout << "Периметр трапеции: " << perimeter << endl;
        break;
    }
    case 2: {
        double ploshad = Trapeze.getPloshad();
        cout << "Площадь трапеции: " << ploshad << endl;
        break;
    }
    case 3: {
        double Corner2 = Trapeze.getCorner1();
        double Corner4 = Trapeze.getCorner2();
        cout << endl;
        cout << "Углы трапеции:" << endl;
        cout << "Угол 1: " << Corner1 << "\n" << "Угол 2: " << Corner2 << "\n" << "Угол 3: " << Corner3 << "\n" << "Угол 4: " << Corner4 << endl;;
        break;
    }
    case 4: {
        double storony = Trapeze.getSide();
        cout << endl;
        cout << "Верхнее основание трапеции: " << Top_base << endl;
        cout << "Нижнее основание трапеции: " << Bottom_base << endl;
        cout << "Боковая сторона 1 трапеции: " << Side1 << endl;
        cout << "Боковая сторона 2 трапеции: " << Side2 << endl;
        break;
    }
    default:
        cout << "Неправильный выбор." << endl;
    }

    return 0;
}
